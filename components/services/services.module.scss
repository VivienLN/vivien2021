$max-width-base: 340;
$ratioStep01: 3/5; // column is 1/5 instead of 1/3 (max width base)
$ratioStep03: 3/4; // column is 1/4 instead of 1/3 (max width base)

@mixin service-svg-mask($mask-url, $width, $height, $x: 0, $icon-x: 0, $ratio: 1) {
    // All svg files are sized to be contained in a 340px column ($max-width) so everything can be calculated from there
    // $width and $height are the svg dimensions as they are saved. $x $y depends on mockup and is also translated to % values
    // If some columns are narrower, we apply a ratio. Note that all the sizes are relative, 
    // so even if the biggest column is not exaclty 340px, ratios for other columns must be respected.
    // 340px is the value used in photoshop mockup, ratios are calculated according to css columns
    // So if ratio = 1, we are in the largest column possible. If ratio = .5, we are in a column half its size, etc.
    $max-width: $max-width-base * $ratio;
    mask-image: url($mask-url);
    mask-size: (100% * $width / $max-width) auto;
    padding-bottom: (100% * $height / $max-width);
    // A little tricky because mask origin is not top/left but center of the mask 
    // (ie. if the mask is mask-size: 50% (width) and mask-position: 50% (left), it wont be aligned to the right, but centered)
    // ... but left 0% *IS* aligned to left
    mask-position: (100% * ($x / ($max-width - $width))) bottom;

    // If there is an icon, it's similar to mask size / position
    // except icon size is different
    $icon-width: 90;
    & ~ .stepIcon {
        width: (100% * $icon-width / $max-width);
        left: (100% * ($icon-x / ($max-width - $icon-width)));
        height: 100%;
        display: flex;
        align-items: center;
    }
}

.stepIcon { 
    opacity: 0;
    transform: scale(0);
    transition: .4s ease-out;
}

.inView {
    opacity: 1;
    transform: scale(1);
}

.serviceImage {
    // background: linear-gradient(to bottom, #ffe200, #ffe200 70%, #e7c300 72%, #333 75%) fixed;
    background: linear-gradient(to bottom, #005e99, #00afe2 50%, #00afe2 70%, #222 74%) fixed;
    mask-repeat: no-repeat;
}

.hexagon01 {
    @include service-svg-mask('../../public/images/services/hexagon.svg', 179, 194, 0, 24, $ratioStep01);
}

.linePatch01 {
    @include service-svg-mask('../../public/images/services/line-patch.svg', 10, 940, 84, 0, $ratioStep01);
    // no need for padding on this one, it *has* to be cropped depending on height
    padding: 0;
}

.line01 {
    @include service-svg-mask('../../public/images/services/line01.svg', 161, 268, 84);
}

.hexagon02 {
    @include service-svg-mask('../../public/images/services/hexagon.svg', 179, 194, 150, 144);
}

.linePatch02 {
    @include service-svg-mask('../../public/images/services/line-patch.svg', 10, 940, 235);
    // no need for padding on this one, it *has* to be cropped depending on height
    padding: 0;
}

.line02 {
    @include service-svg-mask('../../public/images/services/line02.svg', 241, 245, 3);
}

.linePatch03 {
    @include service-svg-mask('../../public/images/services/line-patch.svg', 10, 940, 3, 0, $ratioStep03);
    // no need for padding on this one, it *has* to be cropped depending on height
    padding: 0;
}

.lineEnd {
    @include service-svg-mask('../../public/images/services/line-end.svg', 47, 48, 3, 0, $ratioStep03);
}

.hexagon03 {
    @include service-svg-mask('../../public/images/services/hexagon.svg', 179, 194, 54, 64, $ratioStep03);
}